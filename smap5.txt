
##S mapping 

#will need to make into a function: 
#function smap = map(x,d,Tp,theta,y)

load 'logistic.dat'
x=logistic (1:20,:);
x=flipud(x); #flip so that most recent at top!
#x=rand(7,1);
#preprocess the data: would split into development data x 
#and test data y. then one minus the data if doing 
 #one step projection, or Tp minus if doing Tp steps. 

m=length(x); #define m and d, theta and Tp (last 3 will be in function)
d=2;
Tp=1
theta=1
#always rescale so Xt(0) = 1
x = x.+(1-(x(m,:)))

#x=(x(1:m-1)).-(x(2:m)) # '1 minusing' the data reduced length by 1 (or Tp)
 #x=(x(1:m-Tp)).-(x(Tp+1:m))

#redefine m: now x i Tp shorter.
m = length(x);

embedded= ones((m-d),1); #presize a matrix
embedded

#embed the time series:

for i= 1:(d+1);
col= x([i:(m-(d-(i-1)))],1);
embedded= [embedded, col];
 endfor
# this embedded has the original column of 1's, so chop them off:
embedded= embedded(:,2:(d+2)) 
#embedded is now a matrix of d+1 columns and n-d-1 rows. (3x7 in this case)

#calculate distances between all points to get distbar
# dist should be a vector of length (m*(m-1))/2
[n,dim]= size(embedded);# get size of the embedded time series matrix

#Work out the distances between points (ought to be vectorized)
#Z= ones(((n*(n-1))/2),dim)#presize a matrix Z to hold the vectors
Z = ones(1,dim)#presize a row vector



for i= 1:n
z=embedded(i,:); #take the ith row of embedded
#make it stack up into a matrix m-i times
z=repmat(z,(n-i),1);

#then add onto Z
Z= [Z;z];
#rem=embedded(i+1:n,:)


#Z=z(ones((n-i),1),:);
 #diffs = embedded((i+1):n,:)
#dist = [dist;(sqrt(sum((((embedded((i+1):n,:)).-Z).^2),2)))];

 endfor

Z=Z((2:(1+((n*(n-1))/2))),:) #chop off the row of ones
#the 1 is to account for the first row not being counted
#this is now the first matrix for working out the distances

#need another matrix to subtract: 
TUN=ones(1,dim) #presize a row vector

 for i = 1:(n-1);
     tun= embedded((i+1:n),:);
     TUN = [TUN;tun];
 endfor

TUN = TUN(2:(1+((n*(n-1))/2)),:)#chop off the ones


#subtract the matrices:
dists=Z.-TUN;
distance = sqrt(sum(dists.^2, 2));
distbar = mean(distance)

#now need the distance between the last point in the series and every preceeding:
#Assumes most recent at the top

Xt = embedded(1,:)
#pointZ = repmat((embedded(1,:)),(n-1),1)

#Need Yi: 
Yi = embedded(2:Tp:n-Tp,:);

#And Xi: 
Xi = embedded(Tp+2:Tp:n,:);

#vector of distances between latest known point and every other point in library
#i.e Work out (||Xi-Xt||)
far = Xi.-Xt;
FAR = sqrt(sum(far.^2,2))

#Simplex weights; inversely proportinal to distance
simplexW = 1./FAR
#add these together to get total distance: 
#simplexWsum = sum(simplexW)
#Adjust so total weights = 1
simplexW = simplexW./sum(simplexW)

#therefore the weighted mean of Yi (Yhat) is 
simpYhat = sum(Yi.*simplexW)

#howfar = (embedded((2:n),:)).-(pointZ)
#howfar = sqrt(sum(howfar.^2,2))
#


#calculate weights
weights = e^-theta.*FAR./distbar

#calculate Yhat: yhat = A inverse B Xt
#where A = weight(||xi-Xt||)Xi  and B = weight(||Xi-Xt||)Yi

#Xi is each point in the library, Xt is the predictee (point) and Yi is where 
#Xi ended up at.


B = weights.*Yi


A = weights.*Xi

Yhat = (A\B).*Xt

Yhat = sum(Yhat)


#bxsfun(



#w = e.^(-theta*dist(:,m)/distbar)

#estimate yhat:
 #yhat = sum((pinverse(w))(w*embedded(:,d+1)))
#more generally define Tp time projection:
#Tp=1
#yhat = sum((pinv(w))(x(:,Tp+1):length(x)))


